// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NiR-/notpecl/pecl (interfaces: Backend)

// Package pecltest is a generated GoMock package.
package pecltest

import (
	context "context"
	pecl "github.com/NiR-/notpecl/pecl"
	peclapi "github.com/NiR-/notpecl/peclapi"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBackend is a mock of Backend interface
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// Build mocks base method
func (m *MockBackend) Build(arg0 context.Context, arg1 pecl.BuildOpts) error {
	ret := m.ctrl.Call(m, "Build", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Build indicates an expected call of Build
func (mr *MockBackendMockRecorder) Build(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockBackend)(nil).Build), arg0, arg1)
}

// Download mocks base method
func (m *MockBackend) Download(arg0 context.Context, arg1 pecl.DownloadOpts) (string, error) {
	ret := m.ctrl.Call(m, "Download", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockBackendMockRecorder) Download(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockBackend)(nil).Download), arg0, arg1)
}

// Install mocks base method
func (m *MockBackend) Install(arg0 context.Context, arg1 pecl.InstallOpts) error {
	ret := m.ctrl.Call(m, "Install", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockBackendMockRecorder) Install(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockBackend)(nil).Install), arg0, arg1)
}

// ResolveConstraint mocks base method
func (m *MockBackend) ResolveConstraint(arg0 context.Context, arg1, arg2 string, arg3 peclapi.Stability) (string, error) {
	ret := m.ctrl.Call(m, "ResolveConstraint", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveConstraint indicates an expected call of ResolveConstraint
func (mr *MockBackendMockRecorder) ResolveConstraint(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveConstraint", reflect.TypeOf((*MockBackend)(nil).ResolveConstraint), arg0, arg1, arg2, arg3)
}
